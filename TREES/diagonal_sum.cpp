/*Consider Red lines of slope -1 passing between nodes (in following diagram). The diagonal sum in a binary tree is the sum of all node’s data lying between these lines. Given a Binary Tree of size N, print all diagonal sums.

For the following input tree, output should be 9, 19, 42.
9 is sum of 1, 3 and 5.
19 is sum of 2, 6, 4 and 7.
42 is sum of 9, 10, 11 and 12.

DiagonalSum

Input:
First line of input contains the number of test cases T. For each test case, there will be only a single line of input which is a string representing the tree as described below:

The values in the string are in the order of level order traversal of the tree where, numbers denotes node values, and a character “N” denotes NULL child.

For example:

For the above tree, the string will be: 1 2 3 N N 4 6 N 5 N N 7 N

Output:
Print space separated integers which are the diagonal sums for every diagonal present in the tree with slope -1.

Your Task:
You don't need to take input. Just complete the function diagonalSum() that takes root node of the tree as parameter and prints space seperated integers which are the diagonal sums for every diagonal present in the tree with slope -1. New line after every ouput is generated by the driver code.

Expected Time Complexity : O(n)

Constraints:
1<=T<=30
1<=N<=105

Example:
Input:
2
4 1 3 N N 3
10 8 2 3 5 2
Output:
7 4
12 15 3
*/
#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    struct Node *left;
    struct Node *right;
};
// Utility function to create a new Tree Node
Node* newNode(int val)
{
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;

    return temp;
}
// Function to Build Tree
Node* buildTree(string str)
{
    // Corner Case
    if(str.length() == 0 || str[0] == 'N')
            return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for(string str; iss >> str; )
        ip.push_back(str);

    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while(!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if(currVal != "N") {

            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if(i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if(currVal != "N") {

            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}
void diagonalSum(Node*root);
int main()
{

    int t;
	scanf("%d ",&t);
    while(t--)
    {
        string s;
		getline(cin,s);
        Node* root = buildTree(s);
        diagonalSum(root);
        cout<<endl;
    }
    return 1;
}
void diagonalSumUtil(Node *root,int vd,map<int,int> &sum){
    if(!root)
        return;
    sum[vd]+=root->data;
    diagonalSumUtil(root->left,vd+1,sum);
    diagonalSumUtil(root->right,vd,sum);
}
void diagonalSum(Node* root) {
    map<int,int> sum;
    diagonalSumUtil(root,0,sum);
    map<int,int>::iterator it;
    cout<<"Diagonal sum in a binary tree is -";
    for(it=sum.begin();it!=sum.end();it++)
        cout<<it->second<<" ";
}

